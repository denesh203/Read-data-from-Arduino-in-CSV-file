using System;
using System.IO.Ports;
using System.Windows.Forms;
using System.Text.RegularExpressions;
using System.Linq;
using System.Text;
using System.IO;
using System.Drawing;

namespace ArduinoRead
{
    public partial class Form1 : Form
    {
        private SerialPort serialPort;

        public Form1()
        {
            InitializeComponent();
            InitializeDataGridView();
            InitializeSerialPort();
        }

        private void InitializeSerialPort()
        {
            serialPort = new SerialPort();
            serialPort.PortName = "COM6";       // ⚠️ Change to your Arduino COM port
            serialPort.BaudRate = 115200;
            serialPort.Parity = Parity.None;
            serialPort.DataBits = 8;
            serialPort.StopBits = StopBits.One;
            serialPort.Handshake = Handshake.None;
            serialPort.DataReceived += SerialPort_DataReceived;
        }

        private void InitializeDataGridView()
        {
            // Clear existing columns
            dataGridView1.Columns.Clear();

            // Add 23 columns (C1 to C23)
            for (int i = 1; i <= 23; i++)
            {
                dataGridView1.Columns.Add($"C{i}", $"C{i}");
            }

            // Configure DataGridView appearance
            dataGridView1.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.AllCells;
            dataGridView1.AllowUserToAddRows = false;
            dataGridView1.ReadOnly = true;
        }

        private void button1_Click(object sender, EventArgs e)
        {
            try
            {
                if (!serialPort.IsOpen)
                {
                    serialPort.Open();
                    button1.BackColor = Color.Green;
                    button3.BackColor = Color.Gray;
                }
                else
                {
                    MessageBox.Show("シリアル通信されています.");
                    button1.BackColor = Color.Green;
                    
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error: " + ex.Message);
                button1.BackColor = Color.Red;
            }
        }

        private void SerialPort_DataReceived(object sender, SerialDataReceivedEventArgs e)
        {
            try
            {
                string line = serialPort.ReadLine();
                string cleaned = CleanReceivedData(line);

                if (!string.IsNullOrWhiteSpace(cleaned) && !cleaned.Trim().Equals("00") && !cleaned.Trim().Equals("mode-0") && !cleaned.Trim().Equals("mode-1"))
                {
                    AppendToRichTextBox(cleaned);  // Optional: Show in RichTextBox
                    UpdateDataGridView(cleaned);   // Main display in DataGridView
                }
            }
            catch (Exception ex)
            {
                AppendToRichTextBox("Read error: " + ex.Message);
            }
        }

        private string CleanReceivedData(string input)
        {
            try
            {
                // Remove prefixes and clean the data
                string cleaned = input.Replace("RcvData koki-: ", "")
                                    .Replace("cmd:", "")
                                    .Replace("data ", "");

                // Split into RcvData and OyakiData parts
                int oyakiIndex = cleaned.IndexOf("OyakiData : ");
                if (oyakiIndex < 0) return input;

                string firstPart = cleaned.Substring(0, oyakiIndex).Trim();
                string secondPart = cleaned.Substring(oyakiIndex + "OyakiData : ".Length).Trim();

                // Combine and normalize
                string result = $"{firstPart},{secondPart}";
                return Regex.Replace(result, @"\s*,\s*", ",");
            }
            catch
            {
                return input;
            }
        }

        private void UpdateDataGridView(string dataRow)
        {
            if (dataGridView1.InvokeRequired)
            {
                dataGridView1.Invoke(new Action(() => UpdateDataGridView(dataRow)));
                return;
            }

            try
            {
                string[] values = dataRow.Split(',');

                if (values.Length == 23)
                {
                    dataGridView1.Rows.Add(values);

                    // Auto-scroll to the newest row
                    dataGridView1.FirstDisplayedScrollingRowIndex = dataGridView1.RowCount - 1;
                }
                else
                {
                    AppendToRichTextBox($"Invalid data length: {values.Length} (expected 23)");
                }
            }
            catch (Exception ex)
            {
                AppendToRichTextBox("Grid update error: " + ex.Message);
            }
        }

        private void AppendToRichTextBox(string text)
        {
            if (richTextBox1.InvokeRequired)
            {
                richTextBox1.Invoke(new Action(() =>
                    richTextBox1.AppendText(text + Environment.NewLine)));
            }
            else
            {
                richTextBox1.AppendText(text + Environment.NewLine);
            }
        }

        private void Form1_FormClosing(object sender, FormClosingEventArgs e)
        {
            if (serialPort.IsOpen)
                serialPort.Close();
        }

        private void button2_Click(object sender, EventArgs e)
        {
            try
            {
                // Create a SaveFileDialog to choose where to save the CSV
                using (SaveFileDialog saveFileDialog = new SaveFileDialog())
                {
                    saveFileDialog.Filter = "CSV files (*.csv)|*.csv|All files (*.*)|*.*";
                    saveFileDialog.FilterIndex = 1;
                    saveFileDialog.RestoreDirectory = true;
                    saveFileDialog.FileName = $"ArduinoData_{DateTime.Now:yyyyMMdd_HHmmss}.csv";

                    if (saveFileDialog.ShowDialog() == DialogResult.OK)
                    {
                        // Create a StringBuilder to build the CSV content
                        StringBuilder csvContent = new StringBuilder();

                        // Add column headers
                        var headers = dataGridView1.Columns.Cast<DataGridViewColumn>()
                                           .Select(column => column.HeaderText);
                        csvContent.AppendLine(string.Join(",", headers));

                        // Add data rows
                        foreach (DataGridViewRow row in dataGridView1.Rows)
                        {
                            if (!row.IsNewRow) // Skip the empty new row
                            {
                                var cells = row.Cells.Cast<DataGridViewCell>()
                                               .Select(cell => EscapeCsvValue(cell.Value?.ToString() ?? ""));
                                csvContent.AppendLine(string.Join(",", cells));
                            }
                        }

                        // Write to file
                        File.WriteAllText(saveFileDialog.FileName, csvContent.ToString());

                        MessageBox.Show($"Data saved successfully to:\n{saveFileDialog.FileName}",
                                      "Export Complete",
                                      MessageBoxButtons.OK,
                                      MessageBoxIcon.Information);
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error saving CSV file:\n{ex.Message}",
                              "Error",
                              MessageBoxButtons.OK,
                              MessageBoxIcon.Error);
            }
        }

        // Helper method to properly escape CSV values
        private string EscapeCsvValue(string value)
        {
            if (value.Contains(",") || value.Contains("\"") || value.Contains("\n") || value.Contains("\r"))
            {
                return $"\"{value.Replace("\"", "\"\"")}\"";
            }
            return value;
        }

        private void button3_Click(object sender, EventArgs e)
        {
            if (serialPort.IsOpen)
            { serialPort.Close();

                button1.BackColor = Color.Gray;
                button3.BackColor = Color.Red;
            }
               
        }
    }
}